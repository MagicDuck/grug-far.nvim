*grug-far.txt*  simple to use find and replace plugin

==============================================================================
CONTENTS                                          *grug-far-contents*

    1. Introduction ......................... |grug-far-introduction|
    2. Setup ................................ |grug-far-setup|
    3. Commands ............................. |grug-far-commands|
    4. API .................................. |grug-far-api|

==============================================================================
1. INTRODUCTION                               *grug-far-introduction*

grug-far adds search/replace inside a buffer to neovim. 

==============================================================================
2. SETUP                                             *grug-far-setup*

Make sure to add to call the setup function with the proper configuration in
your `init` file.

    require('grug-far').setup({ ... })

==============================================================================
3. COMMANDS                                       *grug-far-commands*

:GrugFar                                                *GrugFar*

Opens up a grug-far buffer in a vertical split. Multiple such buffers can
be opened, each with their potentially different searches and they will
show up in your buffers list. In visual mode, it will pre-fill search
with the current visual selection.

==============================================================================
4. API                                                 *grug-far-api*


require('grug-far').setup({config})                  *grug-far.setup()*
        Configures this plugin. Currently supported configuration options
        are linked from the plugin's README page:
        https://github.com/MagicDuck/grug-far.nvim/tree/main?tab=readme-ov-file#%EF%B8%8F-configuration

        Parameters: ~
            {config}(optional, table) Table of values; keys as described
                above. Accept defaults by omitting the relevant key.

require('grug-far').open({config})                *grug-far.open()*
        Launches grug-far, where the given config overrides the global plugin
	config that was passed to require('grug-far).setup(...). 
        Currently supported configuration options are the same as the global
	plugin config options linked above.
	If the function is called while in visual mode, it will pre-fill
	search with the current visual selection.

        Parameters: ~
            {config}(optional, table) Table of values; keys as described
                above. Accept defaults by omitting the relevant key.
	
	Return: ~
            {instanceName}(string) 

require('grug-far').with_visual_selection({config})  *grug-far.with_visual_selection()*
        Launches grug-far, pre-filling search with the current visual
	selection. The given config overrides the global plugin
	config that was passed to require('grug-far).setup(...). 

        Currently supported configuration options are the same as the global
	plugin config options linked above.

        Parameters: ~
            {config}(optional, table) Table of values; keys as described
                above. Accept defaults by omitting the relevant key.
        
	Return: ~
            {instanceName}(string) 

require('grug-far').toggle_instance({config})       *grug-far.toggle_instance()*
        Toggles visibility of grug-far instance with the given config.instanceName.
	The given config overrides the global plugin config that was passed to 
	require('grug-far).setup(...). Currently supported configuration options are
	the same as the global plugin config options linked above.

        Parameters: ~
            {config}(optional, table) Table of values; keys as described
                above. Accept defaults by omitting the relevant key.

require('grug-far').toggle_flags({flags})                *grug-far.toggle_flags()*
        Toggles given list of flags in the current grug-far buffer. The 
	flags get added to/removed from the Flags input line.
	ex: require('grug-far).toggle_flags({'--fixed-strings'}). 

        Parameters: ~
            {flags}(table) List of flag strings to toggle.

	Return: ~
	    {flags_state}(table) List of boolean flag states

require('grug-far').has_instance({instanceName})               *grug-far.has_instance()*
        Checks if grug-far instance with given name exists

        Parameters: ~
            {instanceName}(string) 
	
	Return: ~
	    {exists}(boolean) 

require('grug-far').get_instance_name_by_buf({buf})   *grug-far.get_instance_name_by_buf()*
        Returns instance name associated with given buf number.
        if given buf number is 0, returns instance for current buffer.
	Note that even grug far instances that are not specifically given an
	instanceName, will have an automatically generated one.

        Parameters: ~
            {buf}(integer) buf number

	Return: ~
	    {instanceName}(string) name of the instance

require('grug-far').is_instance_open({instanceName})           *grug-far.is_instance_open()*
        Checks if grug-far instance with given name is open.

        Parameters: ~
            {instanceName}(string) 
	
	Return: ~
	    {is_open}(boolean) 

require('grug-far').open_instance({instanceName})           *grug-far.open_instance()*
        Opens grug-far instance with given name if window is closed.
	Otherwise focuses the window.

        Parameters: ~
            {instanceName}(string) 

require('grug-far').close_instance({instanceName})           *grug-far.hide_instance()*
        Closes window of grug-far instance with given name if window is open.

        Parameters: ~
            {instanceName}(string) 

require('grug-far').kill_instance({instanceName})           *grug-far.close_instance()*
        Kills grug-far instance with given name.

        Parameters: ~
            {instanceName}(string) 

require('grug-far').update_instance_prefills({instanceName}, {prefills}, {clearOld})
                                                  *grug-far.update_instance_prefills()*
        Updates grug-far instance with given input prefill.
	If clearOld=true is given, the old input values are ignored.

        Parameters: ~
            {instanceName}(string) 
            {prefills}(PrefillsTableOverride) table 
	       {search=, replacement=, filesFilter=, flags=, paths=}
            {clearOld}(boolean) if given, old input values are ignored

require('grug-far').get_current_visual_selection({strict})
                                              *grug-far.get_current_visual_selection()*
	Gets the current visual selection as a string.
	This is provided as a utility for users so they don't have to rewrite.

        Parameters: ~
            {strict}(boolean) If true, only return selection if currently in
	      visual mode

	Return: ~
	    {visual_selection}(string)

require('grug-far').get_current_visual_selection_lines({strict})
                                        *grug-far.get_current_visual_selection_lines()*
	Gets the current visual selection as a string array for each line.
	This is provided as a utility for users so they don't have to rewrite.

        Parameters: ~
            {strict}(boolean) If true, only return selection if currently in
	      visual mode

	Return: ~
	    {visual_selection}(string[])

==============================================================================
4. Highlights                                          *grug-far-highlights*


Currently supported highlights are linked from the plugin's README page:
https://github.com/MagicDuck/grug-far.nvim/tree/main?tab=readme-ov-file#%EF%B8%8F-configuration

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
